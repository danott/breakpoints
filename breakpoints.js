// Generated by CoffeeScript 1.4.0

/*
Breakpoints
-----------

Unify responsive presentation and behavior by utilizing named breakpoints across
CSS and JavaScript.

Built on the technique shared by Jeremey Keith: http://adactio.com/journal/5429/

In brief, breakpoint names are stored in pseudo-elements, initiated by CSS.
JavaScript relies on these breakpoints named in CSS so media queries don't need
to be copy-pasted into JavaScript, and you definitely don't need to use the
at-present unreliable matchMedia().

@danott
http://github.com/danott
http://github.com/danott/breakpoints

MIT License.
*/


(function() {
  var __hasProp = {}.hasOwnProperty;

  window.Breakpoints = (function() {
    var active, activeFromDom, addCallback, callbacks, ensureArray, runCallbacks, sanitizeDomString, validBreakpointDefinition;

    callbacks = {};

    active = null;

    Breakpoints.prototype.active = function(name) {
      if (name != null) {
        return active === name;
      } else {
        return active;
      }
    };

    Breakpoints.prototype.available = function() {
      var key, value, _results;
      _results = [];
      for (key in callbacks) {
        if (!__hasProp.call(callbacks, key)) continue;
        value = callbacks[key];
        _results.push(key);
      }
      return _results;
    };

    function Breakpoints(breakpointDefinitions, addEventListeners) {
      var _this = this;
      if (addEventListeners == null) {
        addEventListeners = true;
      }
      if (addEventListeners) {
        window.addEventListener("resize", function() {
          return _this.update();
        });
        window.addEventListener("orientationchange", function() {
          return _this.update();
        });
      }
      if (breakpointDefinitions != null) {
        this.add(breakpointDefinitions);
      }
      this.update();
    }

    Breakpoints.prototype.add = function(breakpointDefinitions) {
      var breakpointDefinition, _i, _len, _ref, _results;
      _ref = ensureArray(breakpointDefinitions);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        breakpointDefinition = _ref[_i];
        if (validBreakpointDefinition(breakpointDefinition)) {
          addCallback(breakpointDefinition.name, "enter", breakpointDefinition.enter);
          addCallback(breakpointDefinition.name, "exit", breakpointDefinition.exit);
          _results.push(true);
        } else {
          _results.push(false);
        }
      }
      return _results;
    };

    Breakpoints.prototype.update = function(forceRunCallbacks) {
      var previous;
      if (forceRunCallbacks == null) {
        forceRunCallbacks = false;
      }
      previous = active;
      active = activeFromDom();
      if ((active !== previous) || forceRunCallbacks) {
        this.add({
          name: active
        });
        runCallbacks(previous, "exit");
        runCallbacks(active, "enter");
      }
      return active;
    };

    activeFromDom = function() {
      return sanitizeDomString(window.getComputedStyle(document.body, ':after').getPropertyValue('content'));
    };

    ensureArray = function(arrayish) {
      return [].concat(arrayish);
    };

    addCallback = function(breakpoint, direction, callback) {
      var _base, _ref, _ref1;
      if ((_ref = callbacks[breakpoint]) == null) {
        callbacks[breakpoint] = {};
      }
      if ((_ref1 = (_base = callbacks[breakpoint])[direction]) == null) {
        _base[direction] = [];
      }
      if (callback != null) {
        return callbacks[breakpoint][direction].push(callback);
      }
    };

    runCallbacks = function(breakpoint, direction) {
      var callback, _i, _len, _ref, _results;
      if (validBreakpointDefinition(new BreakpointDefinition(breakpoint))) {
        _ref = callbacks[breakpoint][direction];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          callback = _ref[_i];
          _results.push(callback.call());
        }
        return _results;
      }
    };

    sanitizeDomString = function(stringish) {
      return stringish.replace(/["'\s]/g, "");
    };

    validBreakpointDefinition = function(breakpointDefinition) {
      return (breakpointDefinition.name != null) && breakpointDefinition.name.length > 0;
    };

    return Breakpoints;

  })();

  window.BreakpointDefinition = (function() {

    function BreakpointDefinition(name, enter, exit) {
      this.name = name;
      this.enter = enter;
      this.exit = exit;
    }

    return BreakpointDefinition;

  })();

}).call(this);
